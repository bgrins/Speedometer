"use strict";self.sqlite3Worker1Promiser=function e(r=e.defaultConfig){if(1===arguments.length&&"function"==typeof arguments[0]){const t=r;(r=Object.assign(Object.create(null),e.defaultConfig)).onready=t}else r=Object.assign(Object.create(null),e.defaultConfig,r);const t=Object.create(null),o=function(){},n=r.onerror||o,s=r.debug||o,a=r.generateMessageId?void 0:Object.create(null),c=r.generateMessageId||function(e){return e.type+"#"+(a[e.type]=(a[e.type]||0)+1)},i=(...e)=>{throw new Error(e.join(" "))};let l;return r.worker||(r.worker=e.defaultConfig.worker),"function"==typeof r.worker&&(r.worker=r.worker()),r.worker.onmessage=function(e){e=e.data,s("worker1.onmessage",e);let o=t[e.messageId];if(!o)return e&&"sqlite3-api"===e.type&&"worker1-ready"===e.result?void(r.onready&&r.onready()):(o=t[e.type],o&&o.onrow?void o.onrow(e):void(r.onunhandled?r.onunhandled(arguments[0]):n("sqlite3Worker1Promiser() unhandled worker message:",e)));switch(delete t[e.messageId],e.type){case"error":return void o.reject(e);case"open":l||(l=e.dbId);break;case"close":e.dbId===l&&(l=void 0)}try{o.resolve(e)}catch(e){o.reject(e)}},function(){let e;1===arguments.length?e=arguments[0]:2===arguments.length?e={type:arguments[0],args:arguments[1]}:i("Invalid arugments for sqlite3Worker1Promiser()-created factory."),e.dbId||(e.dbId=l),e.messageId=c(e),e.departureTime=performance.now();const o=Object.create(null);let n;o.message=e,"exec"===e.type&&e.args&&("function"==typeof e.args.callback?(n=e.messageId+":row",o.onrow=e.args.callback,e.args.callback=n,t[n]=o):"string"==typeof e.args.callback&&i("exec callback may not be a string when using the Promise interface."));let a=new Promise((function(n,a){o.resolve=n,o.reject=a,t[e.messageId]=o,s("Posting",e.type,"message to Worker dbId="+(l||"default")+":",e),r.worker.postMessage(e)}));return n&&(a=a.finally((()=>delete t[n]))),a}},self.sqlite3Worker1Promiser.defaultConfig={worker:function(){let e="sqlite3-worker1.js";if(this.currentScript){const r=this.currentScript.src.split("/");r.pop(),e=r.join("/")+"/"+e}else{const r=new URL(self.location.href).searchParams;r.has("sqlite3.dir")&&(e=r.get("sqlite3.dir")+"/"+e)}return new Worker(e+self.location.search)}.bind({currentScript:self?.document?.currentScript}),onerror:(...e)=>console.error("worker1 promiser error",...e)};
//# sourceMappingURL=index.b5d5d629.js.map
