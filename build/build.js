import fs from "fs";
import prettier from "prettier";

function flattenFile(path, newPath) {
    // Read the JavaScript file
    let code = fs.readFileSync(path, "utf8");

    // Find all instances of load("foo.js") in the code
    const loadRegex = /load\(["'](.*?)\.js["']\)/g;
    const matches = code.matchAll(loadRegex);

    // Get directory from path
    const dir = path.split("/").slice(0, -1).join("/");

    // Replace the load() calls with the contents of the file
    for (const match of matches) {
        const fileName = `${dir}/${match[1]}.js`
        const fileContents = fs.readFileSync(fileName, "utf8");
        console.log("Flattening", match[0], match[1]);

        // Replace the load() call with the file contents, but only once
        code = code.replace(match[0], () => {
            const fileCode = `\n\n// Load contents of ${fileName}\n;${fileContents.trim()};\n`;
            return `${fileCode};`;
        });
    }

    // Remove any source map comments
    code = code.replace(/\/\/# sourceMappingURL=.*?$/gm, "");

    code = `// THIS FILE IS AUTOGENERATED FROM ${path}\n\n` + code;

    fs.writeFileSync(newPath, code);

    // Turn preact.js into preact-formatted.js
    const formatedName = newPath.split(".js")[0] + "-formatted.js";
    console.log(formatedName);
    fs.writeFileSync(
        formatedName,
        prettier.format(code, {
            parser: "babel",
        })
    );
}

// There's something like this python. Cheaply grab it to get the
// list of suites. Match from `suite_dirs = ` to the next `}` and
// remove trailing comma so it's valid JSON
/*
  suite_dirs = {
      "Preact": "resources/todomvc/architecture-examples/preact/index.js",
  }
*/

let shellScript = fs.readFileSync("../shell-runner.py", "utf8");
const suiteRegex = /suite_dirs = {([^}]+)}/g;
let suites = "{" + suiteRegex.exec(shellScript)[1].slice(0, -2) + "}";
suites = JSON.parse(suites);

for (const [suite, path] of Object.entries(suites)) {
    flattenFile(`../${path}`, `${suite.toLowerCase()}.js`);
}
